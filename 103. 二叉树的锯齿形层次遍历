/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> ans = new LinkedList<List<Integer>>();
        if (root == null) return ans;
        queue.add(root);
        int level=0; //当前层
        while (!queue.isEmpty()) 
        {
            int levelNum = queue.size(); // 当前层元素的个数            
            List<Integer> subList = new LinkedList<Integer>();
            for (int i = 0; i < levelNum; i++)
            {
                TreeNode curNode = queue.poll();
                if (curNode != null)
                {
                    if(level%2==0) subList.add(curNode.val); 
                    else subList.add(0,curNode.val); 
                    queue.add(curNode.left);
                    queue.add(curNode.right);
                }
            }
            level++;
            if(subList.size()>0) ans.add(subList);
        }
        return ans;
    }
}
