class Solution {
    public int[] searchRange(int[] nums, int target) {
        int first=findFirst(nums,target);
        int last=findLast(nums,target);
        if (first == nums.length || nums[first] != target){
            first=-1;
            last=-1;
        }
        return new int[]{first, last};
    }
    private int findFirst(int[] nums, int target){
        int low=0,high=nums.length-1;
        while(low<high){
            int mid=low+(high-low)/2;
            if(nums[mid]<target){
                low=mid+1;
            }else if(nums[mid]>target){
                high=mid-1;
            }else{
                if(mid==0||mid>0&&nums[mid-1]!=target){
                    return mid;
                }else{
                    high=mid-1;
                }
            }
        }
        return low;
    }
    private int findLast(int[] nums, int target){
        int low=0,high=nums.length-1;
        while(low<high){
            int mid=low+(high-low)/2;
            if(nums[mid]<target){
                low=mid+1;
            }else if(nums[mid]>target){
                high=mid-1;
            }else{
                if((mid==nums.length-1)||(mid<nums.length-1&&nums[mid+1]!=target)){
                    return mid;
                }else{
                    low=mid+1;
                }
            }
        }
        return low;
    }
}