//图的两种表示方法伪代码
/* 图的邻接矩阵表示法 */

#define MaxVertexNum 100      /* 最大顶点数设为100 */
#define INFINITY 65535        /* ∞设为双字节无符号整数的最大值65535*/
typedef int Vertex;           /* 用顶点下标表示顶点,为整型 */
typedef int WeightType;       /* 边的权值设为整型 */
typedef char DataType;        /* 顶点存储的数据类型设为字符型 */

/* 边的定义 */
typedef struct ENode* PtrToENode;
struct ENode{
    Vertex V1,V2;             /* 有向边<V1, V2> */
    WeightType Weight;        /* 权重 */
}
typedef PtrToENode Edge;

/* 图结点的定义 */
typedef struct GNode* PtrToGNode;
struct GNode{
    int Nv;                   /* 顶点数 */
    int Ne;                   /* 边数   */
    WeightType G[MaxVertexNum][MaxVertexNum];   /* 邻接矩阵 */
    DataType Data[MaxVertexNum];      /* 存顶点的数据 *//* 注意：很多情况下，顶点无数据，此时Data[]可以不用出现 */
}
typedef PtrToGNode MGraph; /* 以邻接矩阵存储的图类型 */

/* 初始化一个有VertexNum个顶点但没有边的图 */
MGraph CreateGraph(int VertexNum)
{
    MGraph Graph;
    Graph=(MGraph)malloc(sizeof(struct GNode));
    Graph->Nv=VertexNum;
    Graph->Ne=0;
    for(Vertex V=0;V<VertexNum;V++)
    {
        for(Vertex W=0;W<VertexNum;W++)
        {
            Graph->G[V][W]=INFINITY;
        }
    }
    return Graph;
}
void InsertEdge(MGraph Graph,Edge E)
{
    /* 插入边 <V1, V2> */
    Graph->G[E->V1][E->V2]=E->Weight;
    Graph->G[E->V2][E->V1]=E->Weight;
}

MGraph BuildGraph()
{
    MGraph Graph;
    Edge E;
    int Nv;
    cin>>Nv;             //输入顶点个数
    Graph=CreateGraph(Nv); /* 初始化有Nv个顶点但没有边的图 */ 
    cin>>Graph->Ne;   //输入边的个数
    if(Graph->Ne!=0)
    {
        E=(Edge)mallos(sizeof(struct ENode)); /* 建立边结点 */
        for(int i=0;i<Graph->Ne;i++)
        {
            cin>>E->V1>>E->V2>>E->Weight;   /* 读入边，格式为"起点 终点 权重"，插入邻接矩阵 */
            InsertEdge(Graph,E);
        }
    }
    for(Vertex i=0;i<Graph->Nv;i++)
    {
        cin>>Graph->Data[i];
    }
    return Graph;
}
