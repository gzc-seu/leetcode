/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //前序遍历
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
         List<Integer> res = new ArrayList<>();
         Stack<TreeNode> stack = new Stack<>();
         if(root==null) return res;
         stack.push(root);
        while(!stack.isEmpty())
        {
            TreeNode node = stack.pop();
             res.add(Integer.valueOf(node.val));
           if (node.right != null) {
                stack.push(node.right);
            }
            if (node.left != null) {
                stack.push(node.left);
            }
        }
        return res;
    }
}
//中序遍历
class Solution {
        public List<Integer> inorderTraversal(TreeNode root) {
            List<Integer> list = new ArrayList<>();
            Stack<TreeNode> stack = new Stack<>();
            TreeNode cur = root;
            while (cur != null || !stack.isEmpty()) {
                if (cur != null) {
                    stack.push(cur);
                    cur = cur.left;
                } else {
                    cur = stack.pop();
                    list.add(cur.val);
                    cur = cur.right;
                }
            }
            return list;
        }
    }
    
   // 后序遍历
   class Solution {
    //后序遍历，基本思路和前序遍历一样，入栈顺序为根、右、左，出栈时判断是否第二次入栈节点，是则输出该节点
    public List<Integer> postorderTraversal(TreeNode root) {
        Set<TreeNode> set = new HashSet<>();
        if(root == null)
            return new ArrayList<>();
        List<Integer> res = new LinkedList<>();
        Deque<TreeNode> stack = new LinkedList<>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            //如果node是第二次入栈，或者是叶子节点，直接返回node.val
            if(set.contains(node) || (node.left == null && node.right == null)){
                res.add(node.val);
            }else{
                //将根节点第二次入栈，然后依次将右节点、左节点入栈
                stack.push(node);
                if(node.right != null){
                    stack.push(node.right);
                }
                if(node.left != null){
                    stack.push(node.left);
                }
                //记录第二次入栈的节点
                set.add(node);
            }
        }
        return res;
    }
}
//层次遍历
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result=new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        if(root==null) return result;
        queue.add(root);
        while(!queue.isEmpty())
        {
            int count=queue.size();
            List<Integer> list = new ArrayList<Integer>();
            while(count>0)
            {
                TreeNode node = queue.poll();
                list.add(node.val);
            if(node.left != null)
                queue.add(node.left);
            if(node.right != null)
                queue.add(node.right);
            count--;
            }
           result.add(list);
        }
        return result;
    }
}
