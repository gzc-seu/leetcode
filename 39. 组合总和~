class Solution {
    List<List<Integer>> lists=new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates==null||candidates.length==0||target<0) return lists;
        List<Integer> list = new ArrayList<>();
        backtrack(candidates,target,list,0);
        return lists;
    }
    public void backtrack(int[] candidates, int target,List<Integer> list,int index){
        if(candidates==null||candidates.length==0||target<0) return;
        if(target==0) lists.add(new ArrayList<>(list));
        for(int i=index;i<candidates.length;i++){
            list.add(candidates[i]);
            backtrack(candidates,target-candidates[i],list,i);
            list.remove(list.size() - 1);
        }
    }
}
