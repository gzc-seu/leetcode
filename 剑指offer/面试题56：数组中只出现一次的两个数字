//num1,num2分别为长度为1的数组。传出参数
//将num1[0],num2[0]设置为返回结果
public class Solution {
    public void FindNumsAppearOnce(int [] array,int num1[] , int num2[]) {
        int sum=0;
        //得到异或结果，即为不相同两个数的异或结果sum
        for(int num:array){
            sum^=num;
        }
         //得到sum的二进制的1的最低位
        int flag=(-sum)&sum;
        //分成两个组进行异或，每组异或后的结果就是不相同两个数的其中之一
        for(int num:array){
            if((flag&num)==0){
                num1[0]^=num;
            }else{
                num2[0]^=num;
            }
        }
    }
}
/**
nums = [1,2,10,4,1,4,3,3]

a^a=0
a^0=a
a^b^c=a^c^b
a&(-a)=最低位为1的二进制（从又到左）
所有的异或结果得到sum=2^10=8
flag=-8&8=8
可分为两组，一组为与flag相与等于1的[10]，另一组为0的[1,2,4,1,4,3,3]
组内异或分别得到【10】【2】
**/
