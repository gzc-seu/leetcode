package TestTest;

public class TEST1 {
    public static void main(String[] args) {
        TEST1 m1 = new TEST1();
       // m1.printToMaxOfDigits(2);
        m1.printToMaxOfDigits1(2);
    }

    //打印1到最大的n位数的主方法
    public void printToMaxOfDigits(int n){
        if(n<=0){
            System.out.println("输出的n没有意义");
            return;
        }
        char[] number=new char[n];
        for(int i=0;i<number.length;i++){
            number[i]='0';
        }
        while(!incrementNumber(number)){
            printNumber(number);
        }

    }
    //自加
    private boolean incrementNumber(char[] number){
        boolean isOverflow = false; //判断是否溢出
        int nTakeOver = 0; //判断是否进位
        int nLength = number.length;
        for(int i=nLength-1;i>=0;i--){
            int nSum=number[i]-'0'+nTakeOver;
            if(i==nLength-1) nSum++;
            if(nSum>=10){
                if(i==0){
                    isOverflow=true;
                }else{
                    nTakeOver=1;
                    nSum-=10;
                    number[i]=(char)(nSum+'0');
                }
            }else{
                number[i]=(char)(nSum+'0');
                break;
            }
        }
        return isOverflow;
    }
    //打印数字
    private void printNumber(char[] number) {
        boolean isBeginning0 = true;
        int nLength = number.length;
        for (int i = 0; i < nLength; ++i) {
            if(isBeginning0 && number[i]!='0'){
                isBeginning0 = false;
            }
            if(!isBeginning0){
                System.out.print(number[i]);
            }
        }
        System.out.println();
    }

    //打印1到最大的n位数的主方法
    public void printToMaxOfDigits1(int n){
        if(n<=0){
            System.out.println("输出的n没有意义");
            return;
        }
        char[] number=new char[n];
        for(int i=0;i<number.length;i++){
            number[i]='0';
        }
        for (int i = 0; i < 10; ++i) {
            number[0] = (char) (i + '0');
            printToMaxOfNDigitsRecursively(number, n, 0);
        }
    }
    //利用递归实现1到最大的n位数的全排列
    public void printToMaxOfNDigitsRecursively(char[] number, int n, int index){
        if(index == n - 1){
            printNumber(number);
            return;
        }
        for (int i = 0; i < 10; ++i) {
            number[index + 1] = (char) (i + '0');
            printToMaxOfNDigitsRecursively(number, n, index + 1);
        }
    }

}

