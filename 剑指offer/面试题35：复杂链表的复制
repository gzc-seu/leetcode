/*
public class RandomListNode {
    int label;
    RandomListNode next = null;
    RandomListNode random = null;

    RandomListNode(int label) {
        this.label = label;
    }
}
*/
public class Solution {
    public RandomListNode Clone(RandomListNode pHead)
    {
        if(pHead==null) return null;
        CloneNodes(pHead);
        ConnectRandom(pHead);
        return ReconnectNodes(pHead);
    }
    //1、复制每个结点，如复制结点A得到A1，将结点A1插到结点A后面；
    public void CloneNodes(RandomListNode pHead){
        RandomListNode temp=pHead;
        while(temp!=null){
            RandomListNode clone=new RandomListNode(temp.label);
            RandomListNode next=temp.next;
            temp.next=clone;
            clone.next=next;
            temp=next;
        }
    }
    //2、重新遍历链表，复制老结点的随机指针给新结点，如A1.random = A.random.next;
    public void ConnectRandom(RandomListNode pHead){
       RandomListNode temp=pHead;
        while(temp!=null){
           temp.next.random = temp.random==null?null:temp.random.next;
           temp = temp.next.next;
        }
    }
    //3、拆分链表，将链表拆分为原链表和复制后的链表
    public RandomListNode ReconnectNodes(RandomListNode pHead){
        RandomListNode temp=pHead;
        RandomListNode cloneHead=temp.next;
        while(temp!=null){
           RandomListNode clone=temp.next;
           temp.next=clone.next;
           clone.next=clone.next==null?null:clone.next.next;
           temp=temp.next;
        }
        return cloneHead;
    }
}